import{_ as s,c as e,a2 as n,o as t}from"./chunks/framework.BLg0S_rR.js";const u=JSON.parse('{"title":"崩岸系统容器化部署文档","description":"","frontmatter":{},"headers":[],"relativePath":"Notes/Learning/项目相关笔记/崩岸项目/操作文档.md","filePath":"Notes/Learning/项目相关笔记/崩岸项目/操作文档.md","lastUpdated":1735027682000}'),i={name:"Notes/Learning/项目相关笔记/崩岸项目/操作文档.md"};function p(l,a,o,r,d,c){return t(),e("div",null,a[0]||(a[0]=[n(`<h1 id="崩岸系统容器化部署文档" tabindex="-1">崩岸系统容器化部署文档 <a class="header-anchor" href="#崩岸系统容器化部署文档" aria-label="Permalink to &quot;崩岸系统容器化部署文档&quot;">​</a></h1><h2 id="_1、整体内容" tabindex="-1">1、整体内容 <a class="header-anchor" href="#_1、整体内容" aria-label="Permalink to &quot;1、整体内容&quot;">​</a></h2><p>崩岸系统部署分为八个部分：<strong>前端ngixn服务</strong>、<strong>后端Java服务</strong>、<strong>mongodb资源树数据服务</strong>、<strong>pg空间数据服务</strong>、<strong>pg设备数据服务</strong>、<strong>node外网数据服务</strong>、<strong>dmz数据中转服务</strong>、<strong>模型计算服务</strong>。</p><p>其中，除dmz数据中转服务部署在水文局dmz服务器中，其余均部署于生产环境。</p><p>下面将分容器介绍部署方式。</p><hr><h2 id="_2、pg数据库部署操作步骤" tabindex="-1">2、pg数据库部署操作步骤 <a class="header-anchor" href="#_2、pg数据库部署操作步骤" aria-label="Permalink to &quot;2、pg数据库部署操作步骤&quot;">​</a></h2><h4 id="容器介绍" tabindex="-1">容器介绍 <a class="header-anchor" href="#容器介绍" aria-label="Permalink to &quot;容器介绍&quot;">​</a></h4><p>该容器为数据库服务，用于存储长江崩岸预警系统基础空间数据。</p><h4 id="导入容器" tabindex="-1">导入容器 <a class="header-anchor" href="#导入容器" aria-label="Permalink to &quot;导入容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker load &lt; pg.tar</span></span></code></pre></div><h4 id="启动容器" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器" aria-label="Permalink to &quot;启动容器&quot;">​</a></h4><p>这里需要将D:/1study/Work/2024_1_10_bank/系统部署/V2/dataFolders/pg13/postgis/data替换为本机所挂载数据卷路径，后同。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run --name pg --restart=always -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=123456 -e POSTGRES_DBNAME=gis_db -p 5431:5432 -v F:/Work/bank/images/dataFolders/pg13/postgis/data:/var/lib/postgis/data -v F:/Work/bank/images/dataFolders/pg13/postgresql/data:/var/lib/postgresql/data -d pg:13-3.4</span></span></code></pre></div><h4 id="数据导出" tabindex="-1">数据导出 <a class="header-anchor" href="#数据导出" aria-label="Permalink to &quot;数据导出&quot;">​</a></h4><p>将pg数据库中数据导出本地</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pg_dump -U postgres -h localhost -d bank -f D:\\1study\\Work\\2024_1_10_bank\\系统部署\\V3\\数据库\\bank.sql</span></span></code></pre></div><h4 id="数据导入" tabindex="-1">数据导入 <a class="header-anchor" href="#数据导入" aria-label="Permalink to &quot;数据导入&quot;">​</a></h4><p>这里要先将数据考入挂载文件中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>su postgres</span></span>
<span class="line"><span></span></span>
<span class="line"><span>psql -h localhost -U postgres -d bank -f /var/lib/postgis/data/shore0617.sql</span></span></code></pre></div><hr><h2 id="_3、mongodb数据库部署操作步骤" tabindex="-1">3、mongodb数据库部署操作步骤 <a class="header-anchor" href="#_3、mongodb数据库部署操作步骤" aria-label="Permalink to &quot;3、mongodb数据库部署操作步骤&quot;">​</a></h2><h4 id="容器介绍-1" tabindex="-1">容器介绍 <a class="header-anchor" href="#容器介绍-1" aria-label="Permalink to &quot;容器介绍&quot;">​</a></h4><p>该容器为数据库服务，用于存储长江崩岸预警系统资源树节点数据。</p><h4 id="导入容器-1" tabindex="-1">导入容器 <a class="header-anchor" href="#导入容器-1" aria-label="Permalink to &quot;导入容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker load &lt; mongo.tar</span></span></code></pre></div><h4 id="启动容器-1" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器-1" aria-label="Permalink to &quot;启动容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run -dit --name mongo -p 17017:27017 -v F:/Work/bank/images/dataFolders/mongodb/data:/data/db --restart=always mongo:4.4-focal</span></span></code></pre></div><h4 id="数据导出-1" tabindex="-1">数据导出 <a class="header-anchor" href="#数据导出-1" aria-label="Permalink to &quot;数据导出&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mongodump --host localhost --port 27017 -d bank --out F:/Work/bank/DB/bank_0909</span></span></code></pre></div><h4 id="数据导入-1" tabindex="-1">数据导入 <a class="header-anchor" href="#数据导入-1" aria-label="Permalink to &quot;数据导入&quot;">​</a></h4><p>这里要先将数据考入挂载文件中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mongorestore -h localhost:27017 -d bank --dir /data/db/bank_0619</span></span></code></pre></div><p>如果需要进入命令行进行表操作，可按照这里命令进行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker exec -it mongo /bin/mongosh</span></span>
<span class="line"><span>use admin</span></span>
<span class="line"><span>show dbs</span></span>
<span class="line"><span>db.dropDatabase()</span></span></code></pre></div><hr><h2 id="_4、后端java容器部署操作步骤" tabindex="-1">4、后端Java容器部署操作步骤 <a class="header-anchor" href="#_4、后端java容器部署操作步骤" aria-label="Permalink to &quot;4、后端Java容器部署操作步骤&quot;">​</a></h2><h4 id="容器介绍-2" tabindex="-1">容器介绍 <a class="header-anchor" href="#容器介绍-2" aria-label="Permalink to &quot;容器介绍&quot;">​</a></h4><p>该容器为系统后端服务，用于存储长江崩岸预警系统后端，与数据库、模型服务等均有交互。</p><h4 id="导入容器-2" tabindex="-1">导入容器 <a class="header-anchor" href="#导入容器-2" aria-label="Permalink to &quot;导入容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker load &lt; bankback.tar</span></span></code></pre></div><h4 id="启动容器-2" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器-2" aria-label="Permalink to &quot;启动容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run --name bankback -v D:\\1study\\Work\\2024_1_10_bank\\系统部署\\V2\\dataFolders\\back:/usr/local/resource --privileged=true -p 8989:8989 -d -e TZ=Asia/Shanghai bankback:v3.0 /usr/sbin/init</span></span></code></pre></div><h4 id="启动容器-一行代码" tabindex="-1">启动容器（一行代码） <a class="header-anchor" href="#启动容器-一行代码" aria-label="Permalink to &quot;启动容器（一行代码）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run --name bankback -v F:/Work/bank/images/dataFolders/back:/usr/local/resource --privileged=true -p 8988:8989 -d -e TZ=Asia/Shanghai bankback:v3.0 /usr/sbin/init &amp;&amp; docker exec bankback sh /usr/local/resource/startup.sh</span></span></code></pre></div><h4 id="修改后台配置文件并打包" tabindex="-1">修改后台配置文件并打包 <a class="header-anchor" href="#修改后台配置文件并打包" aria-label="Permalink to &quot;修改后台配置文件并打包&quot;">​</a></h4><p>修改yml中的pg和mongo数据库url</p><h4 id="后台运行后端程序" tabindex="-1">后台运行后端程序 <a class="header-anchor" href="#后台运行后端程序" aria-label="Permalink to &quot;后台运行后端程序&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nohup java -jar bankBack.jar &gt; ./bankBack.out &amp;</span></span></code></pre></div><hr><h2 id="_5、前端nginx容器部署操作步骤" tabindex="-1">5、前端nginx容器部署操作步骤 <a class="header-anchor" href="#_5、前端nginx容器部署操作步骤" aria-label="Permalink to &quot;5、前端nginx容器部署操作步骤&quot;">​</a></h2><h4 id="容器介绍-3" tabindex="-1">容器介绍 <a class="header-anchor" href="#容器介绍-3" aria-label="Permalink to &quot;容器介绍&quot;">​</a></h4><p>该容器为系统前端服务。</p><h4 id="导入容器-3" tabindex="-1">导入容器 <a class="header-anchor" href="#导入容器-3" aria-label="Permalink to &quot;导入容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker load &lt; nginx.tar</span></span></code></pre></div><h4 id="启动容器-3" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器-3" aria-label="Permalink to &quot;启动容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run --name bankfront -v D:\\1study\\Work\\2024_1_10_bank\\系统部署\\V2\\dataFolders\\front:/usr/resource -p 5173:5173 -d nginx</span></span></code></pre></div><h4 id="启动容器-一行代码-1" tabindex="-1">启动容器（一行代码） <a class="header-anchor" href="#启动容器-一行代码-1" aria-label="Permalink to &quot;启动容器（一行代码）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run --name bankfront -v F:/Work/bank/images/dataFolders/front:/usr/resource -p 5171:5173 -d nginx &amp;&amp; docker exec bankfront sh /usr/resource/startup.sh</span></span></code></pre></div><h4 id="根据部署地址修改nginx-conf配置文件" tabindex="-1">根据部署地址修改nginx.conf配置文件 <a class="header-anchor" href="#根据部署地址修改nginx-conf配置文件" aria-label="Permalink to &quot;根据部署地址修改nginx.conf配置文件&quot;">​</a></h4><p>将nginx.conf中的反向代理后端地址修改为真实后端地址</p><h4 id="将nginx-conf复制到nginx配置文件中" tabindex="-1">将nginx.conf复制到nginx配置文件中 <a class="header-anchor" href="#将nginx-conf复制到nginx配置文件中" aria-label="Permalink to &quot;将nginx.conf复制到nginx配置文件中&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cp /usr/resource/nginx.conf /etc/nginx/nginx.conf</span></span></code></pre></div><h4 id="重启nginx服务" tabindex="-1">重启nginx服务 <a class="header-anchor" href="#重启nginx服务" aria-label="Permalink to &quot;重启nginx服务&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nginx</span></span>
<span class="line"><span>nginx -s reload</span></span></code></pre></div><hr><h2 id="_6、内网数据服务容器部署操作步骤" tabindex="-1">6、内网数据服务容器部署操作步骤 <a class="header-anchor" href="#_6、内网数据服务容器部署操作步骤" aria-label="Permalink to &quot;6、内网数据服务容器部署操作步骤&quot;">​</a></h2><h4 id="容器介绍-4" tabindex="-1">容器介绍 <a class="header-anchor" href="#容器介绍-4" aria-label="Permalink to &quot;容器介绍&quot;">​</a></h4><p>该容器为系统数据服务，用于向dmz服务器的数据中转服务发送请求，将公网数据库中数据定期备份至生产网并向公网服务器推送运行日志。</p><h4 id="导入容器-4" tabindex="-1">导入容器 <a class="header-anchor" href="#导入容器-4" aria-label="Permalink to &quot;导入容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker load &lt; datarepeater.tar</span></span></code></pre></div><h4 id="启动容器-4" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器-4" aria-label="Permalink to &quot;启动容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run --privileged=true --name datarepeater -v D:\\1study\\Work\\2024_1_10_bank\\DMZ\\datarepeater:/usr/resource -p 3001:3001 -d --restart=always -e TZ=Asia/Shanghai datarepeater:v1.0 node /usr/resource/server.js /usr/sbin/init</span></span></code></pre></div><h4 id="接口介绍" tabindex="-1">接口介绍 <a class="header-anchor" href="#接口介绍" aria-label="Permalink to &quot;接口介绍&quot;">​</a></h4><h6 id="_1、按时间获取设备数据" tabindex="-1">1、按时间获取设备数据 <a class="header-anchor" href="#_1、按时间获取设备数据" aria-label="Permalink to &quot;1、按时间获取设备数据&quot;">​</a></h6><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>router：/api/device/1hour</span></span>
<span class="line"><span>method：GET</span></span>
<span class="line"><span>params：</span></span>
<span class="line"><span>type:用于指定设备类型(gnss,inclinometer,manometer,stresspile)</span></span></code></pre></div><h6 id="_2、按条目获取最新设备数据" tabindex="-1">2、按条目获取最新设备数据 <a class="header-anchor" href="#_2、按条目获取最新设备数据" aria-label="Permalink to &quot;2、按条目获取最新设备数据&quot;">​</a></h6><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>router：/api/device/newest</span></span>
<span class="line"><span>method：GET</span></span>
<span class="line"><span>params：</span></span>
<span class="line"><span>    type:用于指定设备类(gnss,inclinometer,manometer,stresspile)</span></span>
<span class="line"><span>    count:指定获取数据条目数量</span></span></code></pre></div><h6 id="_3、手动导入一小时内数据至数据库" tabindex="-1">3、手动导入一小时内数据至数据库 <a class="header-anchor" href="#_3、手动导入一小时内数据至数据库" aria-label="Permalink to &quot;3、手动导入一小时内数据至数据库&quot;">​</a></h6><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>router：/api/device/newest</span></span>
<span class="line"><span>method：GET</span></span>
<span class="line"><span>params：</span></span>
<span class="line"><span>    type:用于指定设备类(gnss,inclinometer,manometer,stresspile)</span></span></code></pre></div><h6 id="_4、获取日志文件内容" tabindex="-1">4、获取日志文件内容 <a class="header-anchor" href="#_4、获取日志文件内容" aria-label="Permalink to &quot;4、获取日志文件内容&quot;">​</a></h6><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>router：/api/log/info</span></span>
<span class="line"><span>method：GET</span></span></code></pre></div><h2 id="_7、dmz反向代理容器部署" tabindex="-1">7、dmz反向代理容器部署 <a class="header-anchor" href="#_7、dmz反向代理容器部署" aria-label="Permalink to &quot;7、dmz反向代理容器部署&quot;">​</a></h2><h4 id="容器介绍-5" tabindex="-1">容器介绍 <a class="header-anchor" href="#容器介绍-5" aria-label="Permalink to &quot;容器介绍&quot;">​</a></h4><p>该容器为系统数据中转服务，用于接收数据服务发送的请求并转发至云端数据库与数据服务，实现内网与外网数据互通。</p><h4 id="导入容器-5" tabindex="-1">导入容器 <a class="header-anchor" href="#导入容器-5" aria-label="Permalink to &quot;导入容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker load &lt; nginx.tar</span></span></code></pre></div><h4 id="启动容器-5" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器-5" aria-label="Permalink to &quot;启动容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run --name dmz -v D:\\1study\\Work\\2024_1_10_bank\\系统部署\\V2\\dataFolders\\dmz:/usr/resource -p 5552:5552 -p 5551:5551 -d nginx &amp;&amp; docker exec dmz sh /usr/resource/startup.sh</span></span></code></pre></div><h4 id="反向代理内容解析" tabindex="-1">反向代理内容解析 <a class="header-anchor" href="#反向代理内容解析" aria-label="Permalink to &quot;反向代理内容解析&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nginx代理到数据库服务器</span></span>
<span class="line"><span>stream {</span></span>
<span class="line"><span>    upstream pgsql_socket {</span></span>
<span class="line"><span>        server 119.45.198.54:5432; //数据库服务器</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    server {</span></span>
<span class="line"><span>        listen 5555; //nginx接收端口（docker内部）</span></span>
<span class="line"><span>        allow 172.17.0.2; （允许发送请求的ip）</span></span>
<span class="line"><span>        deny all;               （拒绝访问的ip）</span></span>
<span class="line"><span>        proxy_connect_timeout 60s;</span></span>
<span class="line"><span>        proxy_socket_keepalive on;</span></span>
<span class="line"><span>        proxy_pass pgsql_socket;（同上面的upstream）</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="_8、崩岸模型服务容器部署" tabindex="-1">8、崩岸模型服务容器部署 <a class="header-anchor" href="#_8、崩岸模型服务容器部署" aria-label="Permalink to &quot;8、崩岸模型服务容器部署&quot;">​</a></h2><h4 id="容器介绍-6" tabindex="-1">容器介绍 <a class="header-anchor" href="#容器介绍-6" aria-label="Permalink to &quot;容器介绍&quot;">​</a></h4><p>该容器为系统模型计算服务，用于实现长江崩岸系统模型调度与计算功能。</p><h4 id="导入容器-6" tabindex="-1">导入容器 <a class="header-anchor" href="#导入容器-6" aria-label="Permalink to &quot;导入容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker load &lt; sbms.tar</span></span></code></pre></div><h4 id="启动容器-6" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器-6" aria-label="Permalink to &quot;启动容器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run -dit --name bms -v D:/1study/Work/2024_1_10_bank/BankModel_Service:/usr/resource -p 8000:8000 -d super_bank_model_service &amp;&amp; docker exec bms sh /usr/resource/startup.sh</span></span></code></pre></div><h4 id="_9、流场纹理构建器程序编译" tabindex="-1">9、流场纹理构建器程序编译 <a class="header-anchor" href="#_9、流场纹理构建器程序编译" aria-label="Permalink to &quot;9、流场纹理构建器程序编译&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd ..\\resource\\trigger\\numericalModel\\flowFieldTextureBuilder</span></span>
<span class="line"><span>rm -rf build</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mkdir build</span></span>
<span class="line"><span>cmake -DCMAKE_BUILD_TYPE=Release ..</span></span>
<span class="line"><span>make</span></span></code></pre></div>`,100)]))}const b=s(i,[["render",p]]);export{u as __pageData,b as default};
