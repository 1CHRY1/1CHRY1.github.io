import{_ as i,c as a,a2 as n,o as l}from"./chunks/framework.BLg0S_rR.js";const o=JSON.parse('{"title":"K8S集群搭建教程","description":"","frontmatter":{},"headers":[],"relativePath":"Notes/Learning/kubernates笔记/k8s集群搭建教程.md","filePath":"Notes/Learning/kubernates笔记/k8s集群搭建教程.md","lastUpdated":1735027682000}'),t={name:"Notes/Learning/kubernates笔记/k8s集群搭建教程.md"};function e(h,s,p,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<ul><li></li></ul><h1 id="k8s集群搭建教程" tabindex="-1">K8S集群搭建教程 <a class="header-anchor" href="#k8s集群搭建教程" aria-label="Permalink to &quot;K8S集群搭建教程&quot;">​</a></h1><h2 id="_1-前述" tabindex="-1">1 前述 <a class="header-anchor" href="#_1-前述" aria-label="Permalink to &quot;1 前述&quot;">​</a></h2><h3 id="_1-1-云原生定义" tabindex="-1">1.1 云原生定义 <a class="header-anchor" href="#_1-1-云原生定义" aria-label="Permalink to &quot;1.1 云原生定义&quot;">​</a></h3><ul><li><p>Pivotal《传统应用和SOA向云原生转型指南》（2015）的云原生的特征：</p><ul><li><p>符合 12 要素应用</p><ul><li>基准代码：一份基准代码，多份部署（类似于Git版本控制系统的main分支）；</li><li>显示声明所有依赖关系：通过依赖清单，确切地声明所有依赖项；</li><li>把后端服务当作附加资源：各种后端服务（如数据库、消息队列、邮件服务、缓存系统），不区别对待本地或第三方服务；</li><li>构建、发布、运行：严格区分构建、发布、运行这三个步骤；</li><li>无状态进程：应用的进程必须无状态；</li><li>端口绑定：互联网应用通过端口绑定来提供服务，并监听发送至该端口的请求。应用完全自我加载，不依赖于任何网络服务器；</li><li>并发：通过进程模型进行扩展。进程是一等公民；</li><li>易处理：进程可以瞬间开启或停止，有利于快速、弹性的伸缩应用。进程应追求最小启动时间；进程一旦接受终止信号就会优化的终止；进程在面对突然死亡时保持健壮；</li><li>开发环境与线上环境等价：尽可能的保持开发，预发布，线上环境相同，以尽量做到持续部署；</li><li>日志：应用本身从不存储自己的输出流，不应该试图去写或者管理日志文件，相反，每一个运行的进程都会直接的标准输出（stdout）事件流；</li><li>管理进程：后台管理任务当作一次性进程运行；</li></ul></li><li><p>面向微服务架构</p><ul><li><p>微服务将分解为多个“仅做好一件事”的可独立部署的服务。这件事通常代表某项业务能力，或者最小可提供业务价值的“原子“服务单元。具备以下优点：</p><p>单体系统</p><ul><li>变更周期解耦：只要变更限于单一有界的环境，并且服务继续履行其现有合约；实现了更频繁和快速的部署，从而实现了持续的价值流动；</li><li>减少业务领域和现有代码的学习负担；</li><li>可以加快采用新技术的步伐；</li><li>提供独立、高效的服务扩展；</li></ul></li></ul></li><li><p>自服务敏捷架构（可以认为是DevOps）：</p><ul><li>一个能够持续部署和运行这些微服务的平台；如代码以Git形式“推送”。 然后，自服务敏捷平台构建应用程序工件，构建应用程序环境，部署应用程序，并启动必要的进程。 团队不必考虑他们的代码在哪里运行或如何到达那里，这些对用户都是透明得，因为平台会关注这些。</li></ul></li><li><p>基于 API 的协作</p></li><li><p>抗脆弱性</p></li></ul></li><li><p>云原生计算基金会（2015）定义的特征</p><ul><li>应用容器化</li><li>面向微服务架构</li><li>应用支持容器的编排制度</li></ul></li><li><p>云原生计算基金会（2018）定义</p><ul><li>云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API</li><li>这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更</li></ul></li></ul><h3 id="_1-2-容器、虚拟机、docker、openstack-和-k8s" tabindex="-1">1.2 容器、虚拟机、Docker、Openstack 和 K8S <a class="header-anchor" href="#_1-2-容器、虚拟机、docker、openstack-和-k8s" aria-label="Permalink to &quot;1.2 容器、虚拟机、Docker、Openstack 和 K8S&quot;">​</a></h3><ul><li><strong>容器&amp;虚拟机</strong>：均为虚拟化技术，容器更为轻量化、效率更高、启动更快；虚拟机需数分钟启动，容器仅需数十毫秒；</li><li><strong>Docker</strong>： 容器化虚拟技术事实上的标准；</li><li><strong>OpenStack</strong>：分布式的虚拟机服务平台，相比于普通的虚拟机软件（如Vmare），多了分布式虚拟机调度管理的功能和节点的负载均衡；</li><li><strong>K8S</strong>：分布式的容器调度管理平台，相比于Docker，多了分布式的容器调度管理和节点的负载均衡；</li><li><strong>注意</strong>：常见的中文资料均言K8S是容器编排软件，这里的编排是指调度、管理的意思，而非工作流编排的意思，容易有误导性；</li><li><strong>注意</strong>：无论是Openstack还是K8S，均不支持跨节点的容器或虚拟机的创建；所以将多台电脑合并成一台电脑的想法是不现实的；</li></ul><h3 id="_1-3-k8s-和-云原生" tabindex="-1">1.3 K8S 和 云原生 <a class="header-anchor" href="#_1-3-k8s-和-云原生" aria-label="Permalink to &quot;1.3 K8S 和 云原生&quot;">​</a></h3><p>在单机上运行容器，无法发挥它的最大效能，只有形成集群，才能最大程度发挥容器的良好隔离、资源分配与编排管理的优势，而对于容器的编排管理，Swarm、Mesos 和 Kubernetes 的大战已经基本宣告结束，Kubernetes 成为了无可争议的赢家。</p><ul><li>Kubernetes 成为云原生应用的基石</li><li>有机会成为跨云的真正的云原生应用的操作系统</li></ul><h3 id="_1-4-k8s-介绍" tabindex="-1">1.4 K8S 介绍 <a class="header-anchor" href="#_1-4-k8s-介绍" aria-label="Permalink to &quot;1.4 K8S 介绍&quot;">​</a></h3><ul><li><strong>官方</strong>：<strong>Kubernetes</strong> 也称为 <strong>K8S</strong>，是用于自动部署、扩缩和管理容器化应用程序的开源系统。</li><li><strong>发展历史</strong>：由<strong>Google</strong>设计并捐赠给<strong>Cloud Native Computing Foundation</strong>（今属<strong>Linux</strong>基金会）来使用。</li><li><strong>能力</strong>：<strong>Google</strong> 每周运行数十亿个容器，能够在不扩张运维团队的情况下进行规模扩展。</li><li><strong>作用</strong>： 相当于一个操作系统，可以快速提供<strong>PaaS</strong>服务：1）创建各种容器化测试化环境；2）发布各种容器化服务；3）快速安装各种容器化服务，如MongoDB、<strong>Hbase</strong>、<strong>Postgresql</strong>、<strong>Redis</strong>、<strong>Spark</strong>等；快速提供IaaS服务：通过安装<strong>Openstack</strong>或<strong>KubeVirt</strong>等软件；快速提供<strong>FaaS</strong>服务：通过安装<strong>Kube</strong> <strong>Native</strong>等软件；</li></ul><p>!<a href="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230414170948460.png" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230414170948460.png</a></p><p>image-20230414170948460</p><p>!<a href="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230414171119324.png" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230414171119324.png</a></p><p>image-20230414171119324</p><h3 id="_1-5-基本概念" tabindex="-1">1.5 基本概念 <a class="header-anchor" href="#_1-5-基本概念" aria-label="Permalink to &quot;1.5 基本概念&quot;">​</a></h3><ul><li><strong>Container</strong>：轻量级的系统虚拟化技术，使用namespace隔离环境。</li><li><strong>Pod</strong>：<strong>K8S</strong> 的调度的基本单位，<strong>Pod</strong>是一组紧密关联的容器集合，内部的容器共享PID、IPC、Network和UTS namespace。可以通过进程间通信和文件共享这种简单高效的方式组合完成服务。</li></ul><p>!<a href="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230415141540422.png" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230415141540422.png</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    Pod的设计理念基础是微服务，不同类型的业务组合由不同类型的Pod执行，一个Pod对应一个微服务</span></span></code></pre></div><ul><li><p><strong>Node:</strong> 是Pod运行的主机，可以为物理机，也可以为虚拟机。每个Node上要运行container runtime （docker或者rkt）、kubelet和kube-proxy服务</p><p>!<a href="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230415142123300.png" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230415142123300.png</a></p></li><li><p><strong>Service:</strong> 一个Pod只是一个运行服务的实例，可能在一个节点上停止，在另一个节点以一个新的IP启动一个新的Pod。在K8S集群中，客户端需要访问的服务就是Service对象。每个Service会对应一个集群内部有效的虚拟IP，集群内部通过虚拟IP访问一个服务。</p></li><li><p><strong>Kubelet:</strong> 每个Node的任务和资源管理</p></li><li><p><strong>Kube-proxy:</strong> 负责每个节点的硬件负载均衡</p></li></ul><h3 id="_1-6-k8s-常见命令" tabindex="-1">1.6 K8S 常见命令 <a class="header-anchor" href="#_1-6-k8s-常见命令" aria-label="Permalink to &quot;1.6 K8S 常见命令&quot;">​</a></h3><ul><li><p>运行一个Nginix容器：</p><ul><li><code>kubectl run --image=nginx:alpine nginx-app --port=80</code></li></ul></li><li><p>Kubectl 命令：</p><ul><li><code>kubectl get - 类似于 docker ps，查询资源列表</code></li><li><code>kubectl describe - 类似于 docker inspect，获取资源的详细信息</code></li><li><code>kubectl logs - 类似于 docker logs，获取容器的日志</code></li><li><code>kubectl exec - 类似于 docker exec，在容器内执行一个命令</code></li><li><code>kubectl create -f file.yaml – 根据yaml创建Deployment资源</code></li><li><code>kubectl delete 删除命令，可删除node、pod、svc、depolyment</code></li></ul></li><li><p>Volume：</p><ul><li>一个<strong>Pod</strong>一旦发生异常，<strong>Pod</strong> 产生的数据会随着 <strong>Pod</strong> 消亡而自动消失。<strong>Volume</strong> 用于持久化容器数据。</li><li>如：为 <strong>redis</strong> 容器指定一个 <strong>hostPath</strong> 来存储 <strong>redis</strong> 数据</li></ul></li><li><p>Service：</p><ul><li><p>kubectl创建Pod，Pob的IP地址会随着Pod的重启而变化</p></li><li><p>为了访问Pod提供的服务，采用Service提供为一组Pod一个统一的入口，并提供负载均衡和</p><p>自动服务发现</p><p>。</p><ul><li><code>kubectl expose deployment nginx-app --port=80 --target-port=80 --type=NodePort</code></li></ul></li></ul></li><li><p>Replicas set：</p><ul><li>在一个Service中,可为Pod设置数个副本，以确保服务永不掉线 <ul><li><code>kubectl scale --replicas=3 deployment/nginx-app</code></li></ul></li></ul></li></ul><p>!<a href="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230415143046325.png" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230415143046325.png</a></p><ul><li>滚动升级（Rolling Update）： <ul><li>滚动升级（Rolling Update）通过逐个副本容器替代升级的方式来实现无中断的服务升级： <ul><li><code>kubectl rolling-update frontend-v1 frontend-v2 --image=image:v2</code></li></ul></li><li>滚动升级中若发生错误，可随时回滚： <ul><li><code>kubectl rolling-update frontend-v1 frontend-v2 --rollback</code></li></ul></li></ul></li><li>资源限制： <ul><li>K8S通过 cgroups 提供容器资源管理的功能，可限制每个容器的 CPU 和内存使用，比如对于刚才创建的 deployment，可以通过下面的命令限制 nginx 容器最多只用 50% 的 CPU 和 128MB 的内存： <ul><li><code>kubectl set resources deployment nginx-app -c=nginx --limits=cpu=500m,memory=128Mi</code></li></ul></li><li>或者在yaml中指定资源限制</li></ul></li><li>健康检查： <ul><li>K8S Kubernetes 提供了两种探针（Probe，支持 exec、tcpSocket 和 http 方式）来探测容器的状态： <ul><li>LivenessProbe：探测应用是否处于健康状态，如果不健康则删除并重新创建容器</li><li>ReadinessProbe：探测应用是否启动完成并且处于正常服务状态，如果不正常则不会接收来自 Kubernetes Service 的流量</li></ul></li></ul></li></ul><h3 id="_1-7-k8s-常用运维命令" tabindex="-1">1.7 K8S 常用运维命令 <a class="header-anchor" href="#_1-7-k8s-常用运维命令" aria-label="Permalink to &quot;1.7 K8S 常用运维命令&quot;">​</a></h3><ul><li>查看pod，及所在的节点： <ul><li><code>kubectl get pods -o wide</code></li></ul></li><li>查看pod运行状态 <ul><li>kubectl describe pod -n xxx podname</li><li>kubectl logs -n xxx podname</li></ul></li><li>拉取image失败 <ul><li>使用镜像： <a href="http://xn--yamldocker-yt2pu689a.xn--iom-e88du92cl4n83f.daocloud.io/docker.io" target="_blank" rel="noreferrer">yaml中的docker.io替换为如m.daocloud.io/docker.io</a></li></ul></li><li><strong>若有节点warn，回收垃圾失败：</strong></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> drain</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --delete-local-data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ignore-daemonsets</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NODENAME</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uncordon</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NODENAME</span></span></code></pre></div><h2 id="_2-k8s-集群基础环境部署" tabindex="-1">2 K8S 集群基础环境部署 <a class="header-anchor" href="#_2-k8s-集群基础环境部署" aria-label="Permalink to &quot;2 K8S 集群基础环境部署&quot;">​</a></h2><h3 id="_2-1-服务器" tabindex="-1">2.1 服务器 <a class="header-anchor" href="#_2-1-服务器" aria-label="Permalink to &quot;2.1 服务器&quot;">​</a></h3><ul><li>**网络资源：**子网越牛越好，最低应为万兆</li><li>管理节点： <ul><li>yudayu-2 (223.2.47.148)</li></ul></li><li>计算节点： <ul><li>yudayu-1 (223.2.47.229)</li></ul></li><li>持久化存储资源： <ul><li>暂无：建议NFS</li></ul></li></ul><h3 id="_2-2-安装过程" tabindex="-1">2.2 安装过程 <a class="header-anchor" href="#_2-2-安装过程" aria-label="Permalink to &quot;2.2 安装过程&quot;">​</a></h3><h3 id="_2-2-1-前提条件" tabindex="-1">2.2.1 前提条件 <a class="header-anchor" href="#_2-2-1-前提条件" aria-label="Permalink to &quot;2.2.1 前提条件&quot;">​</a></h3><ol><li>节点之中不可以有重复的主机名、<code>MAC</code> 地址或 <code>product_uuid</code></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sys/class/dmi/id/product_uuid</span></span></code></pre></div><ol><li>检查网络适配器：若有多个网卡，确保每个node的子网通过默认路由可达</li><li>防火墙开放端口(所有节点)</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=443/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=6443/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=2379-2380/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=10250/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=10259/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=10257/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=10256/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --zone=public</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=30000-32767/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span></code></pre></div><ol><li>关闭防火墙(所有节点）—— 首选</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span></span></code></pre></div><ol><li>禁用swap</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">etc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fstab</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mapper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> swap     none                    swap    defaults （注释这行）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">查看并停止使用当前swap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">swapon </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">swapoff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><h3 id="_2-2-2-升级-linux-内核到5" tabindex="-1">2.2.2 升级 Linux 内核到5+： <a class="header-anchor" href="#_2-2-2-升级-linux-内核到5" aria-label="Permalink to &quot;2.2.2 升级 Linux 内核到5+：&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yum makecache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y update</span></span></code></pre></div><h3 id="_2-2-3-安装container-runtime-选用containerd" tabindex="-1">2.2.3 安装Container Runtime(选用containerd)： <a class="header-anchor" href="#_2-2-3-安装container-runtime-选用containerd" aria-label="Permalink to &quot;2.2.3 安装Container Runtime(选用containerd)：&quot;">​</a></h3><ul><li><strong>Docker-engine+cir-dockerd方案（舍弃）</strong>：从kubernetes 1.24开始，dockershim已经从kubelet中移除，但因为历史问题docker却不支持kubernetes主推的CRI（容器运行时接口）标准，需要在kubelet和docker之间加上一个中间层cri-docker。cri-docker是一个支持CRI标准的shim。一头通过CRI跟kubelet交互，另一头跟docker api交互，从而间接的实现了kubernetes以docker作为容器运行时。但是这种架构缺点也很明显，<strong>调用链更长，效率更低</strong>。因此选用containerd作为容器runtime</li><li><strong>containerd</strong>方案: <strong>containerd</strong>是一个<strong>docker</strong>的容器<strong>runtime</strong>，成为<strong>CNCF</strong>的官方项目</li></ul><p>官方安装教程：<a href="https://github.com/containerd/containerd/blob/main/docs/getting-started.md" target="_blank" rel="noreferrer">https://github.com/containerd/containerd/blob/main/docs/getting-started.md</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># **装containerd**</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-utils</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dnf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://download.docker.com/linux/centos/docker-ce.repo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerd.io</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">containerd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/containerd/config.toml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># **安装CNI插件**：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载cni-plugins.tar 从https://github.com/containernetworking/plugins/releases</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在/opt/cni/bin下解压：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/cni/bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Cxzvf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/cni/bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cni-plugins-linux-amd64-v1.1.1.tgz</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/containerd/config.toml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># disabled_plugins = [&quot;cri&quot;] 中移除cri</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerd</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerd</span></span></code></pre></div><h3 id="_2-2-4-配置systemd-cgroup驱动-for-container-runtime" tabindex="-1">2.2.4 <strong>配置systemd cgroup驱动 for container runtime</strong> <a class="header-anchor" href="#_2-2-4-配置systemd-cgroup驱动-for-container-runtime" aria-label="Permalink to &quot;2.2.4  **配置systemd cgroup驱动 for container runtime**&quot;">​</a></h3><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">etc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">containerd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.toml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[plugins.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.containerd.grpc.v1.cri&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.containerd.runtimes.runc]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [plugins.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.containerd.grpc.v1.cri&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.containerd.runtimes.runc.options]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SystemdCgroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sudo sed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;s#SystemdCgroup</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> false#SystemdCgroup</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> true#g&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">etc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">containerd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.toml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">etc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">containerd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config.toml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> grep SystemdCgroup</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 修改sandbox镜像在config.toml中</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sandbox_image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;registry.aliyuncs.com/google_containers/pause:3.9&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">****</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">systemctl restart containerd</span></span></code></pre></div><h3 id="_2-2-5-安装-kubeadm-kubelet-and-kubectl-所有节点" tabindex="-1">2.2.5 安装 kubeadm, kubelet and kubectl（所有节点） <a class="header-anchor" href="#_2-2-5-安装-kubeadm-kubelet-and-kubectl-所有节点" aria-label="Permalink to &quot;2.2.5 安装 kubeadm, kubelet and kubectl（所有节点）&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 登录校园网：</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://portal.njnu.edu.cn/portal_io/logi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;username=lszh2021060810&amp;password=20210608cm&amp;submitBtn=&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://172.28.255.156:801/eportal/portal/login&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --data-urlencode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;callback=dr1003&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --data-urlencode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;login_method=1&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --data-urlencode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;user_account=Temp.dky.model2&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --data-urlencode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;user_password=Temp_dky@model2.nnu&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 将 SELinux 设置为 permissive 模式（相当于将其禁用）</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setenforce</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;s/^SELINUX=enforcing$/SELINUX=permissive/&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/selinux/config</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/yum.repos.d/kubernetes.repo</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[kubernetes]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name=Kubernetes</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">baseurl=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.30/rpm/</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gpgcheck=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gpgkey=https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.30/rpm/repodata/repomd.xml.key</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --nogpgcheck</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  kubelet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubectl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubelet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubelet</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 删除防止更新：</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/yum.repos.d/kubernetes.repo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 检查版本</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubelet</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 配置容器运行时，以便后续通过crictl管理 集群内的容器和镜像</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crictl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runtime-endpoint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unix:///var/run/containerd/containerd.sock</span></span></code></pre></div><h3 id="_2-2-6-转发ipv4" tabindex="-1">2.2.6 转发ipv4 <a class="header-anchor" href="#_2-2-6-转发ipv4" aria-label="Permalink to &quot;2.2.6 转发ipv4&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/sysctl.conf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EOF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vm.swappiness=0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vm.overcommit_memory=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">vm.panic_on_oom=0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fs.inotify.max_user_watches=89100</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sysctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/modules-load.d/k8s.conf</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">overlay</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">br_netfilter</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/sysctl.d/k8s.conf</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">net.bridge.bridge-nf-call-ip6tables = 1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">net.ipv4.ip_forward                 = 1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">net.bridge.bridge-nf-call-iptables = 1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">net.ipv4.conf.default.rp_filter=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">net.ipv4.conf.all.rp_filter=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sysctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --system</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 生效</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 加载内核模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modprobe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> br_netfilter</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 网络桥接模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modprobe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> overlay</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 联合文件系统模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lsmod</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> br_netfilter</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> overlay</span></span></code></pre></div><h3 id="_2-2-7-启动集群" tabindex="-1">2.2.7 启动集群 <a class="header-anchor" href="#_2-2-7-启动集群" aria-label="Permalink to &quot;2.2.7 启动集群&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提前拉取需要的image</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --image-repository</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.aliyuncs.com/google_containers</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看拉取的镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crictl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                            </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 初始化集群</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --apiserver-advertise-address 指定 Kubernetes API Server 的宣告地址，可以不设置让其自动检测</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 其他节点和客户端将使用此地址连接到 API Server</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --image-repository 指定了 Docker 镜像的仓库地址，用于下载 Kubernetes 组件所需的容器镜像。在这里，使用了阿里云容器镜像地址，可以加速镜像的下载。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --service-cidr 指定 Kubernetes 集群中 Service 的 IP 地址范围，Service IP 地址将分配给 Kubernetes Service，以允许它们在集群内通信</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># --pod-network-cidr 指定 Kubernetes 集群中 Pod 网络的 IP 地址范围。Pod IP 地址将分配给容器化的应用程序 Pod，以便它们可以相互通信。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--image-repository </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">registry.aliyuncs.com/google_containers</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--kubernetes-version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">v1.30.3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--service-cidr=20.1.0.0/16 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--pod-network-cidr=55.2.0.0/16</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># worker node加入</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --print-join-command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> label</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yudayu-1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node-role.kubernetes.io/worker=worker</span></span></code></pre></div><h3 id="_2-2-8-配置kubectl变量" tabindex="-1">2.2.8 配置kubectl变量 <a class="header-anchor" href="#_2-2-8-配置kubectl变量" aria-label="Permalink to &quot;2.2.8 配置kubectl变量&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.kube</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/kubernetes/admin.conf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.kube/config</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.kube/config</span></span></code></pre></div><h3 id="_2-2-10-将-master-作为node-管理节点上执行" tabindex="-1">2.2.10 将 master 作为node（管理节点上执行） <a class="header-anchor" href="#_2-2-10-将-master-作为node-管理节点上执行" aria-label="Permalink to &quot;2.2.10 将 master 作为node（管理节点上执行）&quot;">​</a></h3><ul><li>检查 node 是否存在污点，删除污点 <ul><li>污点值有三种： <ul><li>NoSchedule：一定不被调度</li><li>PreferNoSchedule：尽量不被调度【也有被调度的几率】</li><li>NoExecute：不会调度，并且还会驱逐Node已有Pod</li></ul></li></ul></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> describe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Taints</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> taint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node-role.kubernetes.io/control-plane-</span></span></code></pre></div><h3 id="_2-2-9-安装-pod-网络插件-cni-container-network-interface-master" tabindex="-1">2.2.9 安装 Pod 网络插件（CNI：Container Network Interface）(master) <a class="header-anchor" href="#_2-2-9-安装-pod-网络插件-cni-container-network-interface-master" aria-label="Permalink to &quot;2.2.9 安装 Pod 网络插件（CNI：Container Network Interface）(master)&quot;">​</a></h3><p>你必须部署一个基于 Pod 网络插件的 容器网络接口 (CNI)，以便你的 Pod 可以相互通信。</p><ul><li>下载 <strong>yml</strong> 配置文件</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.ym</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -O</span></span></code></pre></div><ul><li>编辑<strong>kube-flannel.yml，修改子网</strong> <strong>10.244.0.0/16</strong> <strong>为</strong> 55.2.0.0/16</li><li>找到如下位置，添加 - --iface-regex=^192.168..</li></ul><p>!<a href="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230408114839608.png" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230408114839608.png</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-flannel.yml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#拉取镜像失败，则将yaml中，替换docker.io为m.daocloud.io/docker.io</span></span></code></pre></div><h2 id="_3-dashboard-仪表盘" tabindex="-1">3 dashboard 仪表盘 <a class="header-anchor" href="#_3-dashboard-仪表盘" aria-label="Permalink to &quot;3  dashboard 仪表盘&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add kubernetes-dashboard repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubernetes-dashboard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://kubernetes.github.io/dashboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubernetes-dashboard/kubernetes-dashboard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> –untar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> values.yaml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 替换仓库docker.io为镜像如，m.daocloud.io/docker.io</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubernetes-dashboard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./kubernetes-dashboard</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --create-namespace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubernetes-dashboard</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> svc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubernetes-dashboard</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubernetes-dashboard</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将其中的，type: ClusterIP修改成type: NodePort，保存退出即可。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> svc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 权限认证：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://kuboard.cn/install-script/k8s-dashboard/auth.yam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubernetes-dashboard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> admin-user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#过期了，重新运行上句命令得到key</span></span></code></pre></div><h2 id="_4-包管理工具helm" tabindex="-1">4 包管理工具Helm <a class="header-anchor" href="#_4-包管理工具helm" aria-label="Permalink to &quot;4 包管理工具Helm&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get_helm.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">3&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 700</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get_helm.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./get_helm.sh</span></span></code></pre></div><h2 id="_6-为-k8s-创建-pv-持久卷" tabindex="-1">6 为 K8S 创建 PV 持久卷 <a class="header-anchor" href="#_6-为-k8s-创建-pv-持久卷" aria-label="Permalink to &quot;6 为 K8S 创建 PV 持久卷&quot;">​</a></h2><h3 id="_6-1-pv和pvc" tabindex="-1">6.1 PV和PVC <a class="header-anchor" href="#_6-1-pv和pvc" aria-label="Permalink to &quot;6.1 PV和PVC&quot;">​</a></h3><ul><li>持久卷(PersistentVolume，PV)是集群中由管理员配置的一段网络存储。它是集群中的资源，就像节点是集群资源一样。PV持久卷和普通的Volume一样，也是使用卷插件来实现的，只是它们拥有独立于任何使用PV的Pod的生命周期。此API对象捕获存储实现的详细信息，包括NFS，iSCSI或特定于云提供程序的存储系统。</li><li>持久卷申领(PersistentVolumeClaim，PVC)表达的是用户对存储的请求。概念上与Pod类似。Pod会耗用节点资源，而PVC申领会耗用PV资源。</li></ul><h3 id="_6-2-用-storageclass-动态创建-pv" tabindex="-1">6.2 用 storageClass 动态创建 PV <a class="header-anchor" href="#_6-2-用-storageclass-动态创建-pv" aria-label="Permalink to &quot;6.2 用 storageClass 动态创建 PV&quot;">​</a></h3><ul><li>对1PB的大量目录创建NFS服务，gisweb1-4，以gisweb4为例子</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">安装NFS:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs-utils</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rpcbind</span></span></code></pre></div><ul><li>设置持久卷权限</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行权限chown -R nobody:nfsnobody /mnt/storage/k8s/pv</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#chmod -R 777 /mnt/storage/k8s/pv</span></span></code></pre></div><ul><li>配置 nfs</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/exports</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加：/mnt/storage/k8s/pv 192.168.0.0/24(rw,sync,no_root_squash)# 以上设置让所有的 IP 都有效</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rpcbind</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rpcbind</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs-server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs-server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-service=nfs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --reloadsystemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span></span></code></pre></div><ul><li>检查</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exportfs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -rvshowmount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127.0.0.1</span></span></code></pre></div><ul><li>所有节点安装nfs客户端</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs-utils</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 每个节点挂载nfs客户端的存储目录，本次nfs客户端在gisweb4（192.168.0.204）上mount -t nfs 192.168.0.204:/mnt/storage/k8s/pv /mnt/storage/k8s/pv</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查挂载情况df -h</span></span></code></pre></div><ul><li>安装nfs-client-provisioner (需要翻墙)</li></ul><p>参考：<a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner" target="_blank" rel="noreferrer">**</a><a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner" target="_blank" rel="noreferrer">https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner</a>**</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新helm repohelm repo update</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 搜索helm库中nfs版本helm search repo nfs-subdir-external-provisioner</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加 helm 仓库helm repo add nfs-subdir-external-provisioner &lt;https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs-subdir-external-provisioner</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs-subdir-external-provisioner/nfs-subdir-external-provisioner</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs.server=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">192.168.0.204</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nfs.path=/mnt/storage/k8s/pv</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image.repository=registry.cn-hangzhou.aliyuncs.com/xzjs/nfs-subdir-external-provisioner</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image.tag=v4.0.0</span></span></code></pre></div><ul><li>手动安装 nfs-client-provisioner</li></ul><p>参考：<a href="http://www.mydlq.club/article/109/#%E5%88%9B%E5%BB%BA-nfs-subdir-external-provisioner-%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6" target="_blank" rel="noreferrer">http://www.mydlq.club/article/109/#创建-nfs-subdir-external-provisioner-部署文件</a></p><ul><li>成功后，安装时添加持久化参数，其中 nfs-storage 为安装的 storageclass 的 provisioner 字段名字</li></ul><h2 id="_7-安装-kubeapps-可视化软件管理工具" tabindex="-1">7 安装 kubeAPPS 可视化软件管理工具 <a class="header-anchor" href="#_7-安装-kubeapps-可视化软件管理工具" aria-label="Permalink to &quot;7 安装 kubeAPPS 可视化软件管理工具&quot;">​</a></h2><p>参考：<a href="https://kubeapps.dev/docs/latest/tutorials/getting-started/" target="_blank" rel="noreferrer">**</a><a href="https://kubeapps.dev/docs/latest/tutorials/getting-started/" target="_blank" rel="noreferrer">https://kubeapps.dev/docs/latest/tutorials/getting-started/</a>**</p><ul><li>安装</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加 kubeapps 仓库helm repo add bitnami &lt;https://charts.bitnami.com/bitnami&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建 kubeapps 的命名空间kubectl create namespace kubeapps</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装helm install kubeapps --namespace kubeapps bitnami/kubeapps</span></span></code></pre></div><ul><li>创建证书</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建用于访问 Kubeapps 和 Kubernetes 的演示凭证kubectl create --namespace default serviceaccount kubeapps-operator</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clusterrolebinding</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubeapps-operator</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --clusterrole=cluster-admin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --serviceaccount=default:kubeapps-operator</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -apiVersion:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1kind:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Secretmetadata:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubeapps-operator-token</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  namespace:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  annotations:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    kubernetes.io/service-account.name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubeapps-operatortype:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubernetes.io/service-account-tokenEOF</span></span></code></pre></div><ul><li>查看令牌 token</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubeapps-operator-token</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> go-template=&#39;{{.data.token | base64decode}}&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eyJhbGciOiJSUzI1NiIsImtpZCI6IkdVQTZzb3JEM1FHdkpxVDNsSEwtVEZWc2hyR08tbmFFWnFGX2Q2OGt5cEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6Imt1YmVhcHBzLW9wZXJhdG9yLXRva2VuIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Imt1YmVhcHBzLW9wZXJhdG9yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNTNjY2M0N2YtZWFmMS00NDY4LWJkN2ItYTVhMzliMzJjMzExIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRlZmF1bHQ6a3ViZWFwcHMtb3BlcmF0b3IifQ.qsTBQODZLD1EUP5WjF_ju0-_ZFoJa2pEGCGf2zoLK71TjZeytD0GUGp4Z5ACNFuJMtedtx8tRgWhioU2oimxGdCIL4f7Szt0dOQgXD15HmoiUjYEcDQNsfTdcmfZw-m3-zwtTqa3kTTG3Wio0wf_f_ayw8qZCDL2i3PK-7h0QeAb1rQhtCz_e8huNrcshjixGlyw8aKUvdi2hPe6yvpxKJqQeOalNhT22b-ax28oIyqmC-NXYUMyRbEsgOjyuJAv6XdjqsQKbOGMKsTtNyf7CvnHl88hfRZpF0W-GuKj1ggKGYClTHuXnsv9QP-AQN1UaEtcAbUp08bHN9isedJL6w</span></span></code></pre></div><ul><li>修改服务模式，将其改为 NodePort</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 因为是测试环境，因此直接采用 NodePort 方式暴露服务端口kubectl edit svc kubeapps -n kubeapps</span></span></code></pre></div><ul><li>找到端口，在安全组放行</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> svc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubeapps</span></span></code></pre></div><ul><li>访问：<a href="http://125.220.153.23:31885/" target="_blank" rel="noreferrer">http://125.220.153.23:31885/</a></li></ul><h2 id="_8-部署metallb-service-load-balancer-for-k8s" tabindex="-1">8 部署MetalLB - service load balancer for K8S <a class="header-anchor" href="#_8-部署metallb-service-load-balancer-for-k8s" aria-label="Permalink to &quot;8 部署MetalLB - service load balancer for K8S&quot;">​</a></h2><ul><li><p>生产平台时，构建一个网段，专门用来服务发布</p></li><li><p>kubectl edit configmap -n kube-system kube-proxy</p></li><li><p>set:</p><ul><li>apiVersion: <a href="http://kubeproxy.config.k8s.io/v1alpha1" target="_blank" rel="noreferrer">kubeproxy.config.k8s.io/v1alpha1</a> kind: KubeProxyConfiguration mode: &quot;ipvs&quot; ipvs: strictARP: true</li></ul></li><li><p>kubectl apply -f <a href="https://raw.githubusercontent.com/metallb/metallb/v0.14.8/config/manifests/metallb-native.yaml" target="_blank" rel="noreferrer">https://raw.githubusercontent.com/metallb/metallb/v0.14.8/config/manifests/metallb-native.yaml</a></p></li><li><p><strong>Layer 2 模式配置</strong></p><ul><li><strong>创建 IPAdressPool</strong></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IPAddressPool.yaml</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">apiVersion: metallb.io/v1beta1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kind: IPAddressPool</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name: pool223</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  namespace: metallb-system</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">spec:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  addresses:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  - 55.2.1.20-55.2.1.40  #（注意修改）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IPAddressPool.yaml</span></span></code></pre></div><hr><ul><li><strong>创建 IPAdvertisement：标记adresses pool的name，用于给不同的服务分配不同的网段</strong></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> L2Advertisement.yaml</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">apiVersion: metallb.io/v1beta1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">kind: L2Advertisement</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name: example123</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  namespace: metallb-system</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">spec:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  ipAddressPools:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  - pool223 #上一步创建的 ip 地址池，通过名字进行关联</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> L2Advertisement.yaml</span></span></code></pre></div></li></ul><h2 id="_9-在-k8s-上部署-postgresql" tabindex="-1">9 在 K8S 上部署 PostgreSQL <a class="header-anchor" href="#_9-在-k8s-上部署-postgresql" aria-label="Permalink to &quot;9 在 K8S 上部署 PostgreSQL&quot;">​</a></h2><ul><li>安装 <ul><li>注意：数据库安装需要持久卷，需提前创建满足要求的<strong>pv</strong>，或者创建<strong>nas</strong>的<strong>stroageclass</strong>，以自动根据<strong>mysql</strong>的<strong>pvc</strong>创建<strong>pv</strong>。</li><li>集群已经配置23服务器的<code>/mnt/storage/k8s/pv</code>为NAS,并已经配置名字为<strong>nas-storage</strong>的<strong>sc</strong></li></ul></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bitnami</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://charts.bitnami.com/bitnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 首先检查是否有oge这个命名空间，否则执行如下进行创建kubectl create ns oge</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># postgresql 这个名字可以自己定义，但后面每一步都要注意对应更改helm install -n oge  bitnami/postgresql \\\\--set global.storageClass=nfs-client \\\\--set readReplicas.persistence.storageClass=nfs-client \\\\--set primary.persistence.storageClass=nfs-client \\\\--set primary.persistence.size=200Gi \\\\--set readReplicas.persistence.size=200Gi \\\\--set image.tag=14.5.0-debian-11-r6</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> geoctap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  bitnami/postgresql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> global.storageClass=nfs-client</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> readReplicas.persistence.storageClass=nfs-client</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> primary.persistence.storageClass=nfs-client</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> primary.persistence.size=200Gi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> readReplicas.persistence.size=200Gi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image.tag=14.5.0-debian-11-r6</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 指定版本，可在kubeapps里面查看# --set image.tag=14.5.0-debian-11-r6</span></span></code></pre></div><ul><li>查看 postgresql 密码</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postgresql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsonpath=&quot;{.data.postgres-password}&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 密码7jXf2gsmUX</span></span></code></pre></div><ul><li>更改服务端口</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> svc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postgresql</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 type=ClusterIP 改为 NodePort# b8:85:84:71:64:28echo &quot;SUBSYSTEM==\\\\&quot;net\\\\&quot;, ACTION==\\\\&quot;add\\\\&quot;, DRIVERS==\\\\&quot;?*\\\\&quot;, ATTR{address}==\\\\&quot; b8:85:84:71:64:28\\\\&quot;, ATTR{type}==\\\\&quot;1\\\\&quot;, KERNEL==\\\\&quot;eno*\\\\&quot;, NAME=\\\\&quot;eno1\\\\&quot;&quot; &gt;&gt; /etc/udev/rules.d/70-persistent-net.rules</span></span></code></pre></div><ul><li>缩放副本集</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发现并没有postgresqlkubectl get all -n oge</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发现有statefulset.apps/postgresql# 设置副本集个数为1kubectl scale --replicas=1 statefulset.apps/postgresql -n oge</span></span></code></pre></div><ul><li>命令行进入pgsql</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入pgsql的podkubectl exec -it -n oge postgresql-0 bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用户登录psql -U postgres</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输入密码7jXf2gsmUX</span></span></code></pre></div><ul><li>在pod外面执行sql</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">psql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 125.220.153.23</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30865</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postgres</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -W</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./public.sql</span></span></code></pre></div><h2 id="_10-在-k8s-上部署-mysql" tabindex="-1">10 在 K8S 上部署 MySQL <a class="header-anchor" href="#_10-在-k8s-上部署-mysql" aria-label="Permalink to &quot;10 在 K8S 上部署 MySQL&quot;">​</a></h2><ul><li>安装 <ul><li>注意：数据库安装需要持久卷，需提前创建满足要求的<code>pv</code>，或者创建<code>nas</code>的 <code>stroageclass</code>，以自动根据postgresql的pvc创建pv。</li><li>集群已经配置23服务器的<code>/mnt/storage/k8s/pv</code>为 <code>NAS</code>,并已经配置名字为 <code>nas-storage</code> 的 <code>sc</code></li></ul></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bitnami</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://charts.bitnami.com/bitnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装helm install -n oge mysql bitnami/mysql \\\\--set global.storageClass=nfs-client \\\\--set readReplicas.persistence.storageClass=nfs-client \\\\--set primary.persistence.storageClass=nfs-client \\\\--set primary.persistence.size=200Gi \\\\--set readReplicas.persistence.size=200Gi</span></span></code></pre></div><ul><li>查看 MySQL 密码</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsonpath=&quot;{.data.mysql-root-password}&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 密码VubCMiHvT1</span></span></code></pre></div><ul><li>更改服务端口</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> svc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将type=ClusterIP改为NodePort# b8:85:84:71:64:28echo &quot;SUBSYSTEM==\\\\&quot;net\\\\&quot;, ACTION==\\\\&quot;add\\\\&quot;, DRIVERS==\\\\&quot;?*\\\\&quot;, ATTR{address}==\\\\&quot; b8:85:84:71:64:28\\\\&quot;, ATTR{type}==\\\\&quot;1\\\\&quot;, KERNEL==\\\\&quot;eno*\\\\&quot;, NAME=\\\\&quot;eno1\\\\&quot;&quot; &gt;&gt; /etc/udev/rules.d/70-persistent-net.rules</span></span></code></pre></div><ol><li>缩放副本集</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发现并没有mysqlkubectl get all -n oge</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发现有statefulset.apps/mysqlkubectl scale --replicas=1 statefulset.apps/mysql -n oge</span></span></code></pre></div><ol><li>在K8S中进入数据库</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysql-1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  bash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入后登录用户mysql -u root -p# 输入密码</span></span></code></pre></div><h2 id="_11-在k8s上部署-mongodb" tabindex="-1">11 在K8S上部署 MongoDB <a class="header-anchor" href="#_11-在k8s上部署-mongodb" aria-label="Permalink to &quot;11 在K8S上部署 MongoDB&quot;">​</a></h2><ul><li>安装 <ul><li>注意：数据库安装需要持久卷，需提前创建满足要求的pv，或者创建nas的stroageclass，以自动根据postgresql的pvc创建pv。</li><li>集群已经配置23服务器的<code>/mnt/storage/k8s/pv</code>为NAS,并已经配置名字为nas-storage的sc</li></ul></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bitnami</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://charts.bitnami.com/bitnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装helm install -n ydy mongodb bitnami/mongodb \\\\--set global.storageClass=nfs-client \\\\--set readReplicas.persistence.storageClass=nfs-client \\\\--set primary.persistence.storageClass=nfs-client \\\\--set primary.persistence.size=100Gi \\\\--set readReplicas.persistence.size=100Gi</span></span></code></pre></div><ul><li>查看 MongoDB 密码</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> secret</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ydy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mongodb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsonpath=&quot;{.data.mongodb-root-password}&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 密码WUL9FPQ2V9</span></span></code></pre></div><ul><li>更改服务端口</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> svc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ydy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mongodb</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将type=ClusterIP改为NodePort# b8:85:84:71:64:28echo &quot;SUBSYSTEM==\\\\&quot;net\\\\&quot;, ACTION==\\\\&quot;add\\\\&quot;, DRIVERS==\\\\&quot;?*\\\\&quot;, ATTR{address}==\\\\&quot; b8:85:84:71:64:28\\\\&quot;, ATTR{type}==\\\\&quot;1\\\\&quot;, KERNEL==\\\\&quot;eno*\\\\&quot;, NAME=\\\\&quot;eno1\\\\&quot;&quot; &gt;&gt; /etc/udev/rules.d/70-persistent-net.rules</span></span></code></pre></div><ol><li>缩放副本集</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发现并没有mongodbkubectl get all -n ydy</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发现有statefulset.apps/mongodbkubectl scale --replicas=1 statefulset.apps/mongodb -n ydy</span></span></code></pre></div><ol><li>在K8S中进入数据库</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ydy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mongodb-644c657c4f-x62cn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><h2 id="_12-在-k8s-上部署-apache-spark" tabindex="-1">12 在 K8S 上部署 Apache Spark <a class="header-anchor" href="#_12-在-k8s-上部署-apache-spark" aria-label="Permalink to &quot;12 在 K8S 上部署 Apache Spark&quot;">​</a></h2><p>两个方式，第一种方式为Spark官方提出的；第二种为Google提出的，更符合K8S原生概念</p><ol><li>Spark On K8S</li><li>spark-on-k8s-operator</li></ol><p>!<a href="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230408170401365.png" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230408170401365.png</a></p><p>image-20230408170401365</p><p>Spark On K8S</p><p>!<a href="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230408170444023.png" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/image-20230408170444023.png</a></p><p>image-20230408170444023</p><p>spark-on-k8s-operator</p><h3 id="_12-1-安装-spark-on-k8s-operator" tabindex="-1">12.1 安装 spark-on-k8s-operator <a class="header-anchor" href="#_12-1-安装-spark-on-k8s-operator" aria-label="Permalink to &quot;12.1 安装 spark-on-k8s-operator&quot;">​</a></h3><p>参考 ：<a href="https://blog.csdn.net/w8998036/article/details/122217230" target="_blank" rel="noreferrer">https://blog.csdn.net/w8998036/article/details/122217230</a></p><ul><li>安装</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark-operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://googlecloudplatform.github.io/spark-on-k8s-operato</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意是否存在 spark-operator 命名空间，没有则创建kubectl create ns spark-operator</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装helm install spark-operator spark-operator/spark-operator --namespace spark-operator  --set sparkJobNamespace=default  --set webhook.enable=true</span></span></code></pre></div><ul><li>创建服务账户</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark-application-rbac.yaml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 内容如下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apiVersion:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1kind:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ServiceAccountmetadata:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  namespace:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark---apiVersion:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rbac.authorization.k8s.io/v1kind:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Rolemetadata:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  namespace:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark-rolerules:-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apiGroups:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  resources: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  verbs: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]- apiGroups: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  resources: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;services&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  verbs: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]---apiVersion: rbac.authorization.k8s.io/v1kind: RoleBindingmetadata:  name: spark-role-binding  namespace: sparksubjects:- kind: ServiceAccount  name: spark  namespace: sparkroleRef:  kind: Role  name: spark-role  apiGroup: rbac.authorization.k8s.io</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clusterrolebinding</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root-cluster-admin-binding</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --clusterrole=cluster-admin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user=root</span></span></code></pre></div><ul><li>编写作业模板并提交作业</li></ul><p><em>创建一个Spark作业的YAML配置文件，并进行部署。</em></p><ol><li>创建spark-pi.yaml文件</li></ol><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sparkoperator.k8s.io/v1beta2&quot;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">SparkApplicationmetadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spark-pi  namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sparkspec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Scala  mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cluster  image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;registry.cn-hangzhou.aliyuncs.com/yudayu/spark:v3.1.1&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 1gcr.io/spark-operator/spark:v3.1.1需要更换镜像，gcr.io目前国内无法访问。可以先对docker挂代理，pull到阿里云镜像后  imagePullPolicy: IfNotPresent  mainClass: org.apache.spark.examples.SparkPi  mainApplicationFile: &quot;local:///opt/spark/examples/jars/spark-examples_2.12-3.1.1.jar&quot;  # 需要更换自己的jar包，local指该jar位于image内，可换成所有节点都能访问的web路径，或者通过指定nas挂载pv，将jar包放在nas的pv里  sparkVersion: &quot;3.1.1&quot;  restartPolicy:    type: Never  volumes:    - name: &quot;test-volume&quot;      hostPath:        path: &quot;/tmp&quot;        type: Directory  driver:    cores: 1    coreLimit: &quot;1200m&quot;    memory: &quot;512m&quot;    labels:      version: 3.1.1    serviceAccount: spark    volumeMounts:      - name: &quot;test-volume&quot;        mountPath: &quot;/tmp&quot;  executor:    cores: 1    instances: 2    memory: &quot;512m&quot;    labels:      version: 3.1.1    volumeMounts:      - name: &quot;test-volume&quot;        mountPath: &quot;/tmp&quot;</span></span></code></pre></div><ol><li>部署一个Spark计算任务</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark-pi.yaml</span></span></code></pre></div><p>运维</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sparkapplications</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> describe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sparkapplications</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> svc</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 查看该任务的spark ui</span></span></code></pre></div><h3 id="_12-2-安装-spark-on-k8s" tabindex="-1">12.2 安装 Spark On K8S <a class="header-anchor" href="#_12-2-安装-spark-on-k8s" aria-label="Permalink to &quot;12.2 安装 Spark On K8S&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bitnami</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://charts.bitnami.com/bitnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意是否存在 spark-operator 命名空间，没有则创建kubectl create ns spark-on-k8s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark-on-k8s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bitnami/spark</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> worker.coreLimit=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./bin/spark-submit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    \\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --class</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.apache.spark.examples.SparkPi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark.kubernetes.container.image=bitnami/spark:3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --master</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> k8s://https://125.220.153.23:6443</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark.kubernetes.driverEnv.SPARK_MASTER_URL=spark://10.97.43.141:7077</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--deploy-mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cluster</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --executor-memory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 20G</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --num-executors</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark.executor.instances=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https:///data/spark-examples_2.12-3.3.0.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark-on-k8s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark-oge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tty</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --restart=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Never&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bitnami/spark:3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark-submit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --master</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark://10.97.43.141:7077</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--class</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.apache.spark.examples.SparkPi</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --deploy-mode</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cluster</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/data/spark-examples_2.12-3.3.0.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100000</span></span></code></pre></div><h2 id="_13-在k8s上部署redis集群" tabindex="-1">13 在K8S上部署redis集群 <a class="header-anchor" href="#_13-在k8s上部署redis集群" aria-label="Permalink to &quot;13 在K8S上部署redis集群&quot;">​</a></h2><ul><li>待更</li></ul><h2 id="_14-在k8s上部署nginx" tabindex="-1">14 在K8S上部署nginx <a class="header-anchor" href="#_14-在k8s上部署nginx" aria-label="Permalink to &quot;14 在K8S上部署nginx&quot;">​</a></h2><h3 id="_14-1-创建pv" tabindex="-1">14.1 创建pv <a class="header-anchor" href="#_14-1-创建pv" aria-label="Permalink to &quot;14.1 创建pv&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-pv.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apiVersion:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1kind:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PersistentVolumemetadata:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-ydy-pv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  namespace:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ydyspec:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  capacity:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    storage:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10Gi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  accessModes:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ReadWriteOnce</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  persistentVolumeReclaimPolicy:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Retain</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  storageClassName:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manual</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  hostPath:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    path:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mnt/storage/k8s/pv/ydy-nginx-pvc</span></span></code></pre></div><h3 id="_14-2-创建pvc" tabindex="-1">14.2 创建pvc <a class="header-anchor" href="#_14-2-创建pvc" aria-label="Permalink to &quot;14.2 创建pvc&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-pvc.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apiVersion:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1kind:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PersistentVolumeClaimmetadata:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-ydy-pvc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  namespace:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ydyspec:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  accessModes:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ReadWriteOnce</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  resources:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    requests:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      storage:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10Gi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  storageClassName:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manual</span></span></code></pre></div><h3 id="_14-3-安装nginx并设置静态资源挂载的pvc" tabindex="-1">14.3 安装nginx并设置静态资源挂载的pvc <a class="header-anchor" href="#_14-3-安装nginx并设置静态资源挂载的pvc" aria-label="Permalink to &quot;14.3 安装nginx并设置静态资源挂载的pvc&quot;">​</a></h3><p>将nginx中的<code>/app</code>挂载到<code>/mnt/storage/k8s/pv/luluancheng-nginx-pvc</code>下</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ydy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bitnami/nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">--set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> staticSitePVC=nginx-ydy-pvc</span></span></code></pre></div><h2 id="附录-疑难问题解决" tabindex="-1">附录：疑难问题解决： <a class="header-anchor" href="#附录-疑难问题解决" aria-label="Permalink to &quot;附录：疑难问题解决：&quot;">​</a></h2><h3 id="_1-cni网络错误" tabindex="-1">1 CNI网络错误 <a class="header-anchor" href="#_1-cni网络错误" aria-label="Permalink to &quot;1 CNI网络错误&quot;">​</a></h3><ul><li>当迁移集群之后，拉取镜像报cni网络错误，如下：</li></ul><p>!<a href="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/8d5d49703c8ac59f24fde81b3982b616.png" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/8d5d49703c8ac59f24fde81b3982b616.png</a></p><p>8d5d49703c8ac59f24fde81b3982b616</p><ul><li>从上面的截图中看到问题出现在给Pod分配IP上，意思是 cni0 的IP不同于\`\`10.244.9.1/24<code>，下面我们使用 </code>ifconfig\`命令查看IP信息</li></ul><p>!<a href="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/79e65e4f797200ad98feac6f8b2d4254.png" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/79e65e4f797200ad98feac6f8b2d4254.png</a></p><p>79e65e4f797200ad98feac6f8b2d4254</p><ul><li>从上面的图中我们可以看到<code>flannel.1</code>的 <strong>IP</strong> 为<code>10.244.9.0</code>，然后我们又使用<code>cat /run/flannel/subnet.env</code>，该文件内容如下：</li></ul><p>!<a href="https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/310efbdb614636a17aa48eaf4a8dc2c5.png" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/gh/binwenwu/picgo_demo/img/310efbdb614636a17aa48eaf4a8dc2c5.png</a></p><p>310efbdb614636a17aa48eaf4a8dc2c5</p><ul><li>其实现在的问题就比较明确了，我们使用的Overlay network为Flannel，也就是说Pod的IP地址段应该在Flannel的subnet下，而现在我们看到cni0的IP地址段与flannel subnet地址段不同，所以就出现了问题。</li><li>解决方案 <ul><li>方法1是将 cni0 的 IP 段修改为<code>10.244.9.1</code></li><li>方法2是将这个错误的网卡删除掉，之后会自动重建</li></ul></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下面我们删除错误的cni0，然后让它自己重建ifconfig cni0 down</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cni0</span></span></code></pre></div><h3 id="_2-kubeadmin安装失败重置" tabindex="-1">2 kubeadmin安装失败重置 <a class="header-anchor" href="#_2-kubeadmin安装失败重置" aria-label="Permalink to &quot;2 kubeadmin安装失败重置&quot;">​</a></h3><p>kubeadmin安全证书问题</p><p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/ad792d4a-5e14-4539-9667-46651c4cdd84/4f28c43e-f333-468e-bd1e-94dbe82ef56d/kubeadmin.png" alt="kubeadmin.png"></p><p>需要清除残留文件后重置kubeadmin环境</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">etc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kubernetes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kubelet.conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">etc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kubernetes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pki</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ca.crt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kubeadm reset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">加入全局变量文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;export KUBECONFIG=/etc/kubernetes/admin.conf&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">etc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">profile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">etc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">profile</span></span></code></pre></div><h3 id="_4-异常断电等导致-etcd-心跳检测出现问题" tabindex="-1">4 异常断电等导致 etcd 心跳检测出现问题 <a class="header-anchor" href="#_4-异常断电等导致-etcd-心跳检测出现问题" aria-label="Permalink to &quot;4 异常断电等导致 etcd 心跳检测出现问题&quot;">​</a></h3><ul><li><a href="https://github.com/kubernetes/kubernetes/issues/107491" target="_blank" rel="noreferrer">Kubernetes API Server cannot be started after improper reboot</a></li><li><a href="https://blog.51cto.com/liruilong/6060676" target="_blank" rel="noreferrer">K8S: etcd 集群备份灾难恢复操作手册</a></li></ul>`,196)]))}const g=i(t,[["render",e]]);export{o as __pageData,g as default};
